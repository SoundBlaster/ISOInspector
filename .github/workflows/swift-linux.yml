name: Swift (Linux)

on:
  push:
    branches:
      - main
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'scripts/**'
      - 'Package.swift'
      - 'Package.resolved'
      - 'Project.swift'
      - 'Workspace.swift'
      - 'ISOInspector.xcodeproj/**'
      - 'ISOInspector.xcworkspace/**'
      - '.github/workflows/*.yml'
  pull_request:
    branches:
      - '**'
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'scripts/**'
      - 'Package.swift'
      - 'Package.resolved'
      - 'Project.swift'
      - 'Workspace.swift'
      - 'ISOInspector.xcodeproj/**'
      - 'ISOInspector.xcworkspace/**'
      - '.github/workflows/*.yml'

jobs:
  lint-build-test:
    name: SwiftLint, Build, Test & Coverage (Linux)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Swift 6.0.1
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: '6.0.1'

      - name: SwiftLint autocorrect check
        run: |
          set -euo pipefail
          docker run --rm -u "$(id -u):$(id -g)" -v "$PWD:/work" -w /work ghcr.io/realm/swiftlint:0.53.0 \
            /bin/sh -lc 'rm -f .swiftlint.cache; swiftlint --fix --no-cache --config .swiftlint.yml'
          if ! git diff --quiet; then
            echo "::error::SwiftLint --fix produced changes. Run scripts/swiftlint-format.sh locally and commit."
            git --no-pager diff --name-only
            exit 1
          fi

      - name: SwiftLint (verify)
        run: |
          docker run --rm -u "$(id -u):$(id -g)" -v "$PWD:/work" -w /work ghcr.io/realm/swiftlint:0.53.0 \
            swiftlint lint --strict --no-cache --config .swiftlint.yml

      - name: Cache SwiftPM build artifacts
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build (debug with tests)
        run: |
          # Build non-UI targets only (SwiftUI apps not available on Linux)
          swift build --target ISOInspectorKit
          swift build --target ISOInspectorCLI
          swift build --target ISOInspectorCLIRunner
          # Build tests for non-UI components only
          swift build --target ISOInspectorKitTests
          swift build --target ISOInspectorCLITests

      - name: Test with coverage
        run: |
          # Test non-UI targets only
          swift test --enable-code-coverage \
            --filter ISOInspectorKitTests
          swift test --enable-code-coverage \
            --filter ISOInspectorCLITests

      - name: Coverage summary
        run: |
          set -euo pipefail
          profile=".build/debug/codecov/default.profdata"
          if [ ! -f "$profile" ]; then
            echo "::error::Coverage profile not found at $profile"
            exit 1
          fi
          mapfile -t binaries < <(find .build -type f -name '*.xctest')
          if [ "${#binaries[@]}" -eq 0 ]; then
            echo "::error::No test binaries found for coverage reporting"
            exit 1
          fi
          llvm-cov report --ignore-filename-regex='Tests/' --instr-profile="$profile" "${binaries[@]}"
