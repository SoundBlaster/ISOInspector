name: macOS Build

on:
  workflow_dispatch: {}
  pull_request:
    branches:
      - "**"
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'scripts/**'
      - 'Package.swift'
      - 'Package.resolved'
      - 'Project.swift'
      - 'Workspace.swift'
      - 'ISOInspector.xcodeproj/**'
      - 'ISOInspector.xcworkspace/**'
      - '.github/workflows/*.yml'
  push:
    branches:
      - main
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'scripts/**'
      - 'Package.swift'
      - 'Package.resolved'
      - 'Project.swift'
      - 'Workspace.swift'
      - 'ISOInspector.xcodeproj/**'
      - 'ISOInspector.xcworkspace/**'
      - '.github/workflows/*.yml'

jobs:
  macos-builds:
    name: macOS Archive & CLI Binary
    runs-on: macos-15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Tuist CLI release
        id: tuist-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TOKEN="${GITHUB_TOKEN:-}" # populated automatically in GitHub Actions
          AUTH_HEADER=""
          if [ -n "${TOKEN}" ]; then
            AUTH_HEADER="Authorization: Bearer ${TOKEN}"
            export AUTH_HEADER
          fi
          python3 <<'PY'
import json
import os
import sys
import urllib.error
import urllib.request

headers = {
    "Accept": "application/vnd.github+json",
    "User-Agent": "isoinspector-ci",
    "X-GitHub-Api-Version": "2022-11-28",
}
auth_header = os.environ.get("AUTH_HEADER")
if auth_header:
    # Explicitly handle 'Authorization: Bearer ...' and 'Authorization:Bearer ...'
    if auth_header.startswith("Authorization:"):
        value = auth_header[len("Authorization:"):].strip()
        if value.startswith("Bearer "):
            headers["Authorization"] = value
        else:
            sys.stderr.write("Authorization header does not start with 'Bearer '\n")
            sys.exit(1)
request = urllib.request.Request(
    "https://api.github.com/repos/tuist/tuist/releases?per_page=100",
    headers=headers,
)
try:
    with urllib.request.urlopen(request) as response:
        payload = json.load(response)
except urllib.error.HTTPError as exc:  # pragma: no cover - network failure guard
    sys.stderr.write("Failed to determine Tuist CLI release\n")
    sys.stderr.write(f"HTTP error: {exc.code}\n")
    try:
        details = exc.read().decode("utf-8")
        data = json.loads(details)
        error_data = data if isinstance(data, dict) else None
        message = error_data.get("message") if error_data else None
        if message:
            sys.stderr.write(message + "\n")
    except Exception:  # pragma: no cover - best effort diagnostics
        pass
    sys.exit(1)

version = None
for release in payload:
    tag = release.get("tag_name")
    if not tag:
        continue
    for asset in release.get("assets", []):
        if asset.get("name") == "tuist.zip":
            version = tag
            break
    if version:
        break

if not version:
    sys.stderr.write("Failed to determine Tuist CLI release\n")
    error_data = payload if isinstance(payload, dict) else None
    if error_data and "message" in error_data:
        sys.stderr.write(str(error_data["message"]) + "\n")
    sys.exit(1)

with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
    fh.write(f"tuist_version={version}\n")
PY

      - name: Cache Tuist binary
        id: cache-tuist
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/tuist/${{ steps.tuist-version.outputs.tuist_version }}
          key: ${{ runner.os }}-tuist-${{ steps.tuist-version.outputs.tuist_version }}

      - name: Install Tuist
        env:
          TUIST_VERSION: ${{ steps.tuist-version.outputs.tuist_version }}
        run: |
          set -euo pipefail
          INSTALL_DIR="${RUNNER_TEMP}/tuist/${TUIST_VERSION}"
          mkdir -p "${INSTALL_DIR}"
          if [ ! -x "${INSTALL_DIR}/tuist" ]; then
            echo "Downloading Tuist ${TUIST_VERSION}"
            tmpdir=$(mktemp -d)
            curl -fL -o "${tmpdir}/tuist.zip" "https://github.com/tuist/tuist/releases/download/${TUIST_VERSION}/tuist.zip"
            unzip -q "${tmpdir}/tuist.zip" -d "${tmpdir}"
            rsync -a "${tmpdir}/" "${INSTALL_DIR}/"
            chmod +x "${INSTALL_DIR}/tuist"
            rm -rf "${tmpdir}"
          fi
          echo "${INSTALL_DIR}" >> "$GITHUB_PATH"

      - name: Show Tuist version
        run: tuist version

      - name: Select Xcode 16.0 (required for `.icon` assets)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Validate Tuist project definition
        run: tuist dump project > /dev/null

      - name: Install Tuist dependencies
        run: tuist install

      - name: Generate Xcode project with Tuist
        run: tuist generate --no-open

      - name: Archive ISOInspectorApp (unsigned)
        run: |
          set -eo pipefail
          xcodebuild archive \
            -workspace ISOInspector.xcworkspace \
            -scheme ISOInspectorApp-macOS \
            -destination 'generic/platform=macOS' \
            -archivePath build/ISOInspectorApp \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      - name: Build ISOInspectorCLI release binary
        run: swift build --product isoinspect --configuration release

      - name: Prepare artifacts
        run: |
          set -eo pipefail
          mkdir -p artifacts
          cp -R build/ISOInspectorApp.xcarchive artifacts/
          cli_path=$(swift build --product isoinspect --configuration release --show-bin-path)
          cp "$cli_path/isoinspect" artifacts/isoinspect

      - name: Upload ISOInspectorApp archive
        uses: actions/upload-artifact@v4
        with:
          name: ISOInspectorApp-unsigned-archive
          path: artifacts/ISOInspectorApp.xcarchive

      - name: Upload isoinspect binary
        uses: actions/upload-artifact@v4
        with:
          name: isoinspect-macos-release
          path: artifacts/isoinspect
