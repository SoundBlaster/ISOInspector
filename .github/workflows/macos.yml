name: macOS Build

on:
  workflow_dispatch: {}
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main

jobs:
  macos-builds:
    name: macOS Archive & CLI Binary
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Tuist release
        id: tuist-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TOKEN="${GITHUB_TOKEN:-}" # populated automatically in GitHub Actions
          AUTH_HEADER=""
          if [ -n "${TOKEN}" ]; then
            AUTH_HEADER="Authorization: Bearer ${TOKEN}"
          fi
          RESPONSE=$(curl -fsSL \
            --retry 5 \
            --retry-delay 2 \
            --retry-all-errors \
            ${AUTH_HEADER:+-H "$AUTH_HEADER"} \
            -H "Accept: application/vnd.github+json" \
            -H "User-Agent: isoinspector-ci" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/tuist/tuist/releases/latest")
          TUIST_VERSION=$(jq -r '.tag_name // empty' <<<"${RESPONSE}")
          if [ -z "${TUIST_VERSION}" ]; then
            echo "Failed to determine Tuist release" >&2
            jq -r '.message // empty' <<<"${RESPONSE}" >&2 || true
            exit 1
          fi
          echo "tuist_version=${TUIST_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Cache Tuist binary
        id: cache-tuist
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/tuist/${{ steps.tuist-version.outputs.tuist_version }}
          key: ${{ runner.os }}-tuist-${{ steps.tuist-version.outputs.tuist_version }}

      - name: Select latest stable Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Install Tuist
        env:
          TUIST_VERSION: ${{ steps.tuist-version.outputs.tuist_version }}
        run: |
          set -euo pipefail

          INSTALL_DIR="${RUNNER_TEMP}/tuist/${TUIST_VERSION}"
          mkdir -p "${INSTALL_DIR}"

          build_from_source() {
            echo "Building Tuist ${TUIST_VERSION} from source"
            rm -rf "${INSTALL_DIR}"
            mkdir -p "${INSTALL_DIR}"

            local source_dir="${INSTALL_DIR}/source"
            git clone --depth 1 --branch "${TUIST_VERSION}" https://github.com/tuist/tuist.git "${source_dir}"

            pushd "${source_dir}" >/dev/null
            swift build --configuration release --build-path "${source_dir}/.build" --product ProjectDescription
            swift build --configuration release --build-path "${source_dir}/.build" --product tuist
            popd >/dev/null

            ln -sfn "${source_dir}/Templates" "${INSTALL_DIR}/Templates"

            printf '%s\n' \
              '#!/usr/bin/env bash' \
              'set -euo pipefail' \
              'SCRIPT_DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' \
              'SOURCE_DIR="${SCRIPT_DIR}/source"' \
              'BUILD_PATH="${SOURCE_DIR}/.build"' \
              'exec swift run --package-path "${SOURCE_DIR}" --configuration release --build-path "${BUILD_PATH}" --skip-build tuist "$@"' \
              > "${INSTALL_DIR}/tuist"
            chmod +x "${INSTALL_DIR}/tuist"
          }

          if [ ! -x "${INSTALL_DIR}/tuist" ]; then
            echo "Downloading Tuist ${TUIST_VERSION}"
            tmpdir=$(mktemp -d)
            if curl -fL -o "${tmpdir}/tuist.zip" "https://github.com/tuist/tuist/releases/download/${TUIST_VERSION}/tuist.zip"; then
              unzip -q "${tmpdir}/tuist.zip" -d "${tmpdir}"
              rsync -a "${tmpdir}/" "${INSTALL_DIR}/"
              chmod +x "${INSTALL_DIR}/tuist"
              if ! "${INSTALL_DIR}/tuist" version >/dev/null 2>&1; then
                echo "Prebuilt Tuist binary is not compatible with this runner"
                build_from_source
              fi
            else
              echo "Failed to download prebuilt Tuist ${TUIST_VERSION}"
              build_from_source
            fi
            rm -rf "${tmpdir}"
          fi

          echo "${INSTALL_DIR}" >> "$GITHUB_PATH"

      - name: Show Tuist version
        run: tuist version

      - name: Validate Tuist project definition
        run: tuist dump project > /dev/null

      - name: Install Tuist dependencies
        run: tuist install

      - name: Generate Xcode project with Tuist
        run: tuist generate --no-open

      - name: Archive ISOInspectorApp (unsigned)
        run: |
          set -eo pipefail
          xcodebuild archive \
            -workspace ISOInspector.xcworkspace \
            -scheme ISOInspectorApp-macOS \
            -destination 'generic/platform=macOS' \
            -archivePath build/ISOInspectorApp \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      - name: Build ISOInspectorCLI release binary
        run: swift build --product isoinspect --configuration release

      - name: Prepare artifacts
        run: |
          set -eo pipefail
          mkdir -p artifacts
          cp -R build/ISOInspectorApp.xcarchive artifacts/
          cli_path=$(swift build --product isoinspect --configuration release --show-bin-path)
          cp "$cli_path/isoinspect" artifacts/isoinspect

      - name: Upload ISOInspectorApp archive
        uses: actions/upload-artifact@v4
        with:
          name: ISOInspectorApp-unsigned-archive
          path: artifacts/ISOInspectorApp.xcarchive

      - name: Upload isoinspect binary
        uses: actions/upload-artifact@v4
        with:
          name: isoinspect-macos-release
          path: artifacts/isoinspect
