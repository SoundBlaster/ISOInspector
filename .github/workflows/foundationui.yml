name: FoundationUI CI

on:
  workflow_dispatch: {}
  pull_request:
    branches:
      - "**"
    paths:
      - 'FoundationUI/**/*.swift'
      - 'FoundationUI/**/Project.swift'
      - 'Examples/ComponentTestApp/**/*.swift'
      - 'Examples/ComponentTestApp/**/Project.swift'
      - 'Workspace.swift'
      - '.github/workflows/foundationui.yml'
  push:
    branches:
      - main
    paths:
      - 'FoundationUI/**/*.swift'
      - 'FoundationUI/**/Project.swift'
      - 'Examples/ComponentTestApp/**/*.swift'
      - 'Examples/ComponentTestApp/**/Project.swift'
      - 'Workspace.swift'
      - '.github/workflows/foundationui.yml'

jobs:
  build-and-test-foundationui:
    name: Build and Test FoundationUI & ComponentTestApp
    runs-on: macos-15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Tuist CLI release
        id: tuist-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TOKEN="${GITHUB_TOKEN:-}" # populated automatically in GitHub Actions
          AUTH_HEADER=""
          if [ -n "${TOKEN}" ]; then
            AUTH_HEADER="Authorization: Bearer ${TOKEN}"
          fi
          RESPONSE=$(curl -fsSL \
            --retry 5 \
            --retry-delay 2 \
            --retry-all-errors \
            ${AUTH_HEADER:+-H "$AUTH_HEADER"} \
            -H "Accept: application/vnd.github+json" \
            -H "User-Agent: isoinspector-ci" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/tuist/tuist/releases?per_page=30")
          TUIST_VERSION=$(jq -r '
            (
              [.[]
                | select(((.name // "") | test("^CLI")) and ((.tag_name // "") != ""))
                | .tag_name
              ][0]
            ) // empty
          ' <<<"${RESPONSE}")
          if [ -z "${TUIST_VERSION}" ]; then
            TUIST_VERSION=$(jq -r '
              (
                [.[]
                  | select(((.tag_name // "") != "") and (((.tag_name // "") | contains("@")) | not))
                  | .tag_name
                ][0]
              ) // empty
            ' <<<"${RESPONSE}")
          fi
          if [ -z "${TUIST_VERSION}" ]; then
            echo "Failed to determine Tuist CLI release" >&2
            jq -r '.message // empty' <<<"${RESPONSE}" >&2 || true
            exit 1
          fi
          echo "tuist_version=${TUIST_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Cache Tuist binary
        id: cache-tuist
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/tuist/${{ steps.tuist-version.outputs.tuist_version }}
          key: ${{ runner.os }}-tuist-${{ steps.tuist-version.outputs.tuist_version }}

      - name: Install Tuist
        env:
          TUIST_VERSION: ${{ steps.tuist-version.outputs.tuist_version }}
        run: |
          set -euo pipefail
          INSTALL_DIR="${RUNNER_TEMP}/tuist/${TUIST_VERSION}"
          mkdir -p "${INSTALL_DIR}"
          if [ ! -x "${INSTALL_DIR}/tuist" ]; then
            echo "Downloading Tuist ${TUIST_VERSION}"
            tmpdir=$(mktemp -d)
            curl -fL -o "${tmpdir}/tuist.zip" "https://github.com/tuist/tuist/releases/download/${TUIST_VERSION}/tuist.zip"
            unzip -q "${tmpdir}/tuist.zip" -d "${tmpdir}"
            rsync -a "${tmpdir}/" "${INSTALL_DIR}/"
            chmod +x "${INSTALL_DIR}/tuist"
            rm -rf "${tmpdir}"
          fi
          echo "${INSTALL_DIR}" >> "$GITHUB_PATH"

      - name: Show Tuist version
        run: tuist version

      - name: Select Xcode 16.0
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.0"

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Show Swift version
        run: swift --version

      - name: List available simulators
        run: |
          echo "Available iOS Simulators:"
          xcrun simctl list devices available | grep "iPhone"

      - name: Cache Tuist dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/tuist
            .build
          key: ${{ runner.os }}-tuist-deps-${{ hashFiles('**/Project.swift', 'Workspace.swift') }}
          restore-keys: |
            ${{ runner.os }}-tuist-deps-

      - name: Validate Tuist project definitions
        run: |
          set -eo pipefail
          echo "Validating FoundationUI project..."
          cd FoundationUI
          tuist dump project > /dev/null
          cd ..

          echo "Validating ComponentTestApp project..."
          cd Examples/ComponentTestApp
          tuist dump project > /dev/null
          cd ../..

          echo "Validating workspace..."
          tuist dump workspace > /dev/null

      - name: Install Tuist dependencies
        run: tuist install

      - name: Generate Xcode workspace with Tuist
        run: tuist generate --no-open

      - name: Build FoundationUI framework (iOS)
        run: |
          set -eo pipefail
          echo "Building FoundationUI for iOS..."
          xcodebuild build \
            -workspace ISOInspector.xcworkspace \
            -scheme FoundationUI \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      - name: Build FoundationUI framework (macOS)
        run: |
          set -eo pipefail
          echo "Building FoundationUI for macOS..."
          xcodebuild build \
            -workspace ISOInspector.xcworkspace \
            -scheme FoundationUI \
            -destination 'platform=macOS' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      - name: Run FoundationUI tests (iOS)
        run: |
          set -eo pipefail
          echo "Running FoundationUI tests on iOS..."
          xcodebuild test \
            -workspace ISOInspector.xcworkspace \
            -scheme FoundationUI \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      - name: Run FoundationUI tests (macOS)
        run: |
          set -eo pipefail
          echo "Running FoundationUI tests on macOS..."
          xcodebuild test \
            -workspace ISOInspector.xcworkspace \
            -scheme FoundationUI \
            -destination 'platform=macOS' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      - name: Build ComponentTestApp (iOS)
        run: |
          set -eo pipefail
          echo "Building ComponentTestApp for iOS..."
          xcodebuild build \
            -workspace ISOInspector.xcworkspace \
            -scheme ComponentTestApp-iOS \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      - name: Build ComponentTestApp (macOS)
        run: |
          set -eo pipefail
          echo "Building ComponentTestApp for macOS..."
          xcodebuild build \
            -workspace ISOInspector.xcworkspace \
            -scheme ComponentTestApp-macOS \
            -destination 'platform=macOS' \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO

      # TODO: Add UI tests for ComponentTestApp when test targets are created
      # - name: Run ComponentTestApp UI tests (iOS)
      #   run: |
      #     set -eo pipefail
      #     echo "Running ComponentTestApp UI tests on iOS..."
      #     xcodebuild test \
      #       -workspace ISOInspector.xcworkspace \
      #       -scheme ComponentTestApp-iOS \
      #       -destination 'platform=iOS Simulator,name=iPhone 15 Pro' \
      #       -configuration Debug \
      #       -only-testing:ComponentTestApp-iOS-UITests \
      #       CODE_SIGN_IDENTITY="" \
      #       CODE_SIGNING_ALLOWED=NO \
      #       CODE_SIGNING_REQUIRED=NO

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ~/Library/Logs/DiagnosticReports/
            ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult
          if-no-files-found: ignore
